name: Manual Tests

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - fast
          - integration
          - database
          - api
          - runn
          - custom
      custom_include_tags:
        description: 'Tags to include (for custom type)'
        required: false
        default: ''
      custom_exclude_tags:
        description: 'Tags to exclude (for custom type)'
        required: false
        default: ''

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok' || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'database' || github.event.inputs.test_type == 'api' || github.event.inputs.test_type == 'runn' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 23
      uses: actions/setup-java@v4
      with:
        java-version: '23'
        distribution: 'graalvm'
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v3
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Build application
      run: ./gradlew build -x test
    
    # Run JUnit tests based on selection
    - name: Run selected tests
      run: |
        case "${{ github.event.inputs.test_type }}" in
          "all")
            ./gradlew test
            ;;
          "fast")
            ./gradlew test -PincludeTags="Fast"
            ;;
          "integration")
            ./gradlew test -PincludeTags="IntegrationTest"
            ;;
          "database")
            ./gradlew test -PincludeTags="DatabaseTest"
            ;;
          "api")
            ./gradlew test -PincludeTags="ApiTest"
            ;;
          "custom")
            GRADLE_COMMAND="./gradlew test"
            if [ -n "${{ github.event.inputs.custom_include_tags }}" ]; then
              GRADLE_COMMAND="$GRADLE_COMMAND -PincludeTags=${{ github.event.inputs.custom_include_tags }}"
            fi
            if [ -n "${{ github.event.inputs.custom_exclude_tags }}" ]; then
              GRADLE_COMMAND="$GRADLE_COMMAND -PexcludeTags=${{ github.event.inputs.custom_exclude_tags }}"
            fi
            echo "Running: $GRADLE_COMMAND"
            $GRADLE_COMMAND
            ;;
        esac
      env:
        SPRING_DATA_MONGODB_URI: mongodb://localhost:27017/ecsite-test
      if: ${{ github.event.inputs.test_type != 'runn' }}
    
    # Run Runn tests if selected
    - name: Start Spring Boot for Runn tests
      if: ${{ github.event.inputs.test_type == 'runn' || github.event.inputs.test_type == 'all' }}
      run: |
        export SPRING_DATA_MONGODB_URI=mongodb://localhost:27017/ecsite-test
        ./gradlew bootRun &
        echo $! > spring-boot.pid
        # アプリケーションの起動を待機
        for i in {1..30}; do
          if curl -f http://localhost:8080/api/authentication/login -X POST -H "Content-Type: application/json" -d '{}' 2>/dev/null | grep -q "status"; then
            echo "Application is ready"
            break
          fi
          echo "Waiting for application to start... attempt $i"
          sleep 5
        done
      env:
        SPRING_PROFILES_ACTIVE: test
    
    - name: Run Runn API tests
      if: ${{ github.event.inputs.test_type == 'runn' || github.event.inputs.test_type == 'all' }}
      run: |
        cd test
        docker build -t runn-api-tests .
        docker run --rm \
          --network host \
          -v $(pwd)/api-tests:/tests/api-tests:ro \
          -e API_BASE_URL=http://localhost:8080 \
          runn-api-tests run /tests/api-tests/**/*.yml
    
    - name: Stop Spring Boot application
      if: always()
      run: |
        if [ -f spring-boot.pid ]; then
          kill $(cat spring-boot.pid) || true
        fi
        pkill -f "gradlew bootRun" || true
    
    - name: Generate test report
      run: ./gradlew jacocoTestReport
      continue-on-error: true
    
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          build/reports/tests/
          build/reports/jacoco/
          test/reports/