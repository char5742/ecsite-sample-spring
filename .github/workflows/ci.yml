name: CI Pipeline

on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches: [ main, develop ]

jobs:
  quick-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 23
      uses: actions/setup-java@v4
      with:
        java-version: '23'
        distribution: 'graalvm'
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v3
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Check code formatting
      run: ./gradlew spotlessCheck
    
    - name: Build with Gradle
      run: ./gradlew build -x test
    
    - name: Run fast tests only
      run: ./gradlew test -PincludeTags="Fast"
    
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-reports
        path: build/reports/tests/

  api-tests:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' && 
      (contains(github.event.pull_request.title, '[api]') ||
       contains(github.event.pull_request.labels.*.name, 'api-test'))
    
    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok' || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 30s
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 23
      uses: actions/setup-java@v4
      with:
        java-version: '23'
        distribution: 'graalvm'
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v3
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build application
      run: ./gradlew build -x test
    
    - name: Start Spring Boot application
      run: |
        export SPRING_DATA_MONGODB_URI=mongodb://localhost:27017/ecsite-test
        ./gradlew bootRun &
        echo $! > spring-boot.pid
        # アプリケーションの起動を待機
        for i in {1..30}; do
          if curl -f http://localhost:8080/api/authentication/login -X POST -H "Content-Type: application/json" -d '{}' 2>/dev/null | grep -q "status"; then
            echo "Application is ready"
            break
          fi
          echo "Waiting for application to start... attempt $i"
          sleep 5
        done
      env:
        SPRING_PROFILES_ACTIVE: test
    
    - name: Run API tests with Runn
      run: |
        cd test
        docker build -t runn-api-tests .
        docker run --rm \
          --network host \
          -v $(pwd)/api-tests:/tests/api-tests:ro \
          -e API_BASE_URL=http://localhost:8080 \
          runn-api-tests run /tests/api-tests/**/*.yml
    
    - name: Stop Spring Boot application
      if: always()
      run: |
        if [ -f spring-boot.pid ]; then
          kill $(cat spring-boot.pid) || true
        fi
        pkill -f "gradlew bootRun" || true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: api-test-results
        path: |
          test/reports/
          spring-app.log